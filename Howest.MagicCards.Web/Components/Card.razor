@inject NavigationManager navigationManager;

<article class="border p-3 m-3 d-flex flex-column justify-content-between" style="flex-basis: 25%" >
	<div>
		<div>
			<h3>@card.Name</h3>
			<p class="fw-bold">@card.ArtistName</p>
		</div>
		@if (card.ImageUrl == null)
		{
			<img src="images/placeholder.png" style="height: 310px; width: 223px;" @onclick="(() => addCardToDeck(card))" @onclick:preventDefault />
		} else
		{
			<img src="@card.ImageUrl" @onclick="(() => addCardToDeck(card))" @onclick:preventDefault alt="@card.Description"/>
		}
		
		<div>
			<div class="d-flex justify-content-between">
				<p>@card.Set</p>
				<p>@card.Rarity</p>
			</div>
		</div>
	</div>
	<button @onclick="(() => showDetailedCard(card.Id))" @onclick:preventDefault class="align-self-end">View Details!</button>
</article>

@code {
	[Parameter]
	public CardDTO card { get; set; }
	[Parameter]
	public EventCallback<CardDTO> OnCardClicked { get; set; }

	private void showDetailedCard(long cardId)
	{
		navigationManager.NavigateTo($"/cards/{cardId}");
	}

	private async void addCardToDeck(CardDTO card)
	{
		await OnCardClicked.InvokeAsync(card);
	}
}
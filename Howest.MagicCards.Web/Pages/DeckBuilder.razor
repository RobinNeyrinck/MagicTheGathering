@page "/deckbuilder"

@inject CardService _cardRepository
@inject IMapper _mapper

<PageTitle>DeckBuilder</PageTitle>

<header>
	<h1>DeckBuilder</h1>
</header>

<main>
	<CardFilter sets="@sets" rarities="@rarities" types="@types" OnFilterChanged="UpdateCards"></CardFilter>
	<div class="container">
		<div id="cards">
			<CardList cards="@cards"></CardList>
		</div>
		<div id="deck">
			<!-- TODO: figure out strategy of displaying deck -->
		</div>
		<PageFilter></PageFilter>
	</div>
</main>

@code {
	private string title = "DeckBuilder";
	private IEnumerable<CardDTO>? cards = null;
	private IEnumerable<SetDTO>? sets = null;
	private IEnumerable<RarityDTO>? rarities = null;
	private IEnumerable<TypeDTO>? types = null;

	protected override async Task OnInitializedAsync()
	{
		cards = await _cardRepository.GetCardsAsync();
		sets = await _cardRepository.GetSetsAsync();
		rarities = await _cardRepository.GetRaritiesAsync();
		types = await _cardRepository.GetTypesAsync();
	}

	protected async void UpdateCards(CardFilterArgs args)
	{
		cards = await _cardRepository.Filter(args);
	}

}
